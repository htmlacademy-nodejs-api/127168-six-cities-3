openapi: 3.0.1
info:
  title: API сервер для проекта «Шесть городов».
  description: |-
    * Список ресурсов и маршрутов сервера «Шесть городов».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 3.0.0
tags:
  - name: rent-offers
    description: Действия с объявлениями.
  - name: comments
    description: Действия с комментариями.
  - name: users
    description: Действия с пользователем.
  - name: favorites
    description: Действия с избранными объявлениями.

paths:
  /rent-offers:
    get:
      tags:
        - rent-offers
      summary: Получение списка предложений по аренде
      description: Возвращает список преложений по аренде в виде массива объектов. По умолчанию возвращает 60 предложений по аренде. Возможно запросить больше предложений, указав в запросе необходимое количество предложений по аренде.
      parameters:
        - in: query
          name: count
          schema:
            type: integer
            example: 100
          description: Требуемое количество предложений
          required: false


      responses:
        "200":
          description: Массив предложений по аренде
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/rent-offer-min'
                    - type: object

  /rent-offers/premium:
    get:
      tags:
        - rent-offers
      summary: Получение премиальных предложений по аренде
      description: Возвращает список премиальных преложений по аренде в виде массива объектов.

      responses:
        "200":
          description: Массив премиальных предложений по аренде
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/rent-offer-min'
                    - type: object

  /rent-offers/{rentId}:
    get:
      tags:
        - rent-offers
      summary: Получение детальной информации по предложению
      description: Возвращает предложение по аренде с идентификатором rentId.

    post:
      tags:
        - rent-offers
      summary: Создание нового предложения по аренде
      description: Возвращает новое предложение по аренде с идентификатором rentId.

    put:
      tags:
        - rent-offers
      summary: Редактирование информации по аренде
      description: Возвращает отредактированное предложение по аренде с идентификатором rentId.

    delete:
      tags:
        - rent-offers
      summary: Удаление предложения по аренде
      description: Удаляет предложение по аренде, созданное конкретным пользователем.

  /comments/{rentId}:
    get:
      tags:
        - comments
      summary: Получение списка комментариев к предложению
      description: Возвращает список комментариев для предложения с идентификатором rentId.

    post:
      tags:
        - comments
      summary: Добавление нового комментария
      description: Добавляет новый комментарий для предложения с идентификатором rentId.

  /users/register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя.

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true

      responses:
        "201":
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "400":
          description: Невалидные данные.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidData'

        "409":
          description: Пользователь с таким email уже существует.

  /users/login:
    post:
      tags:
        - users
      summary: Авторизация пользователя
      description: Авторизует пользователя на основе логина и пароля. В случае успешного запроса сервер вернёт токен, по которому в дальнейшем происходит авторизация. Этот токен необходимо передавать через заголовок X-Token.

      requestBody:
        description: Аторизационные данные&#58; логин и пароль
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser'
        required: true

      responses:
        "200":
          description: Авторизация пройдена успешно. Возвращается объект пользователя и X-Token.
          headers:
            X-Token:
              schema:
                type: string
              description: Токен авторизации. Передавать в закрытые части приложения.
              example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "400":
          description: Невалидные данные.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidData'

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю
      parameters:
        - in: header
          name: X-Token
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20
          description: Токен авторизации
          required:
            true

      responses:
        "200":
          description: Проверка авторизации пройдена успешно.
          headers:
            X-Token:
              schema:
                type: string
              description: Токен авторизации. Передавать в закрытые части приложения.
              example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "401":
          description: Пользователь не авторизован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedUser'

  /users/logout:
    delete:
      tags:
        - users
      summary: Завершение работы пользователя
      description: Завершает сеанс работы — выход из авторизации.
      parameters:
        - in: header
          name: X-Token
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20
          description: Токен авторизации
          required:
            true

      responses:
        "204":
          description: Сеанс завершён.

  /favorites:
    get:
      tags:
        - favorites
      summary: Получение списка избранных предложений
      description: Возвращает все предложения, добавленные в избранное.
      parameters:
        - in: header
          name: X-Token
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20
          description: Токен авторизации
          required:
            true

      responses:
        "200":
          description: Массив избранных предложений по аренде
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/rent-offer-min'
                    - type: object

        "401":
          description: Пользователь не авторизован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedUser'

  /favorites/{rentId}/{status}:
    post:
      tags:
        - favorites
      summary: Изменение статуса избранного объявления
      description: Добавление или удаление предложения в/из избранного. Возвращает предложение с идентификатором rentId с актуальным состоянием поля isFavorite


components:
  schemas:
    rent-offer-min:
      type: object

      properties:
        title:
          type: string
          example: The WonderINN Mirrored Glass Cabin

        city:
          type: string
          example: Cologne

        propertyType:
          type: string
          example: Room

        price:
          type: number
          example: 2026

        rating:
          type: number
          example: 1.6

        preview:
          type: string
          example: preview002.jpg

        postDate:
          type: string
          example: 2023-01-16T15:13:04.633Z

        premium:
          type: boolean
          example: false

        favorite:
          type: boolean
          example: true

        numComments:
          type: number
          example: 39

    loginUser:
      type: object

      properties:
        email:
          type: string
          example: caroline_mccormick@gmail.com

        password:
          type: string
          example: qwerty12345

    createUser:
      type: object

      properties:
        username:
          type: string
          example: Caroline McCormick

        email:
          type: string
          example: caroline_mccormick@gmail.com

        avatar:
          type: string
          example: avatar-image.jpg

        password:
          type: string
          example: qwerty12345

        userStatus:
          type: string
          example: Standart

    user:
      type: object

      properties:
        userId:
          type: string
          example: 5c3zjtpxeclquo2p2zlu91ic

        username:
          type: string
          example: Caroline McCormick

        email:
          type: string
          example: caroline_mccormick@gmail.com

        avatar:
          type: string
          example: avatar-image.jpg

        userStatus:
          type: string
          example: Standart

    invalidData:
      type: object

      properties:
        error:
          type: string
          example: Невалидные данные. Проверьте заполненные поля

    unauthorizedUser:
      type: object

      properties:
        error:
          type: string
          example: Пользователь не авторизован.

    noData:
      type: object

      properties:
        error:
          type: string
          example: Данные по запросу отсутствуют.
